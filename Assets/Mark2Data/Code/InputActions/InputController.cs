//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Mark2Data/Code/InputActions/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""7c680936-1e08-46ec-a712-338ce16309ce"",
            ""actions"": [
                {
                    ""name"": ""ZoomIn/Out"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3ffab75e-ed5d-4ca7-86b6-6d12f3effe33"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""e5de6550-2f11-4597-8c1a-4ba794ad6ae8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5ffb574e-fb6e-4b21-9980-b9e482f0ba86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""25944840-5f61-495a-8942-9b620ce244f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""6b4602be-ecdf-4c14-9175-be383d909034"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Scroll"",
                    ""id"": ""6acb2a0b-d0df-4a8f-b9c5-2676a065a5e6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomIn/Out"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b50ce541-6fcb-4187-9d95-112833ed4d6d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-0.3,max=0.3)"",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ZoomIn/Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca93273-bebb-45c9-a0a7-591bc76d53f5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f72c6d9e-f838-4375-b961-662ed1afb661"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c80b460-d540-475b-8c86-5972b8b413f4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cf0cc69-076a-417d-9fc9-4135951f3c81"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CommonActions"",
            ""id"": ""58116910-9c08-4ed7-a48e-03f9056f24df"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""c5050658-9ecc-4360-bbf2-aa4041de1e98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64bfa4e8-e73f-43b9-bdef-cc9f2ec4d358"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_ZoomInOut = m_Camera.FindAction("ZoomIn/Out", throwIfNotFound: true);
        m_Camera_MoveRight = m_Camera.FindAction("MoveRight", throwIfNotFound: true);
        m_Camera_MoveLeft = m_Camera.FindAction("MoveLeft", throwIfNotFound: true);
        m_Camera_MoveUp = m_Camera.FindAction("MoveUp", throwIfNotFound: true);
        m_Camera_MoveDown = m_Camera.FindAction("MoveDown", throwIfNotFound: true);
        // CommonActions
        m_CommonActions = asset.FindActionMap("CommonActions", throwIfNotFound: true);
        m_CommonActions_MouseClick = m_CommonActions.FindAction("MouseClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_ZoomInOut;
    private readonly InputAction m_Camera_MoveRight;
    private readonly InputAction m_Camera_MoveLeft;
    private readonly InputAction m_Camera_MoveUp;
    private readonly InputAction m_Camera_MoveDown;
    public struct CameraActions
    {
        private @InputController m_Wrapper;
        public CameraActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomInOut => m_Wrapper.m_Camera_ZoomInOut;
        public InputAction @MoveRight => m_Wrapper.m_Camera_MoveRight;
        public InputAction @MoveLeft => m_Wrapper.m_Camera_MoveLeft;
        public InputAction @MoveUp => m_Wrapper.m_Camera_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_Camera_MoveDown;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @ZoomInOut.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomInOut;
                @ZoomInOut.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomInOut;
                @ZoomInOut.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomInOut;
                @MoveRight.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveRight;
                @MoveLeft.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveLeft;
                @MoveUp.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveDown;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ZoomInOut.started += instance.OnZoomInOut;
                @ZoomInOut.performed += instance.OnZoomInOut;
                @ZoomInOut.canceled += instance.OnZoomInOut;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // CommonActions
    private readonly InputActionMap m_CommonActions;
    private ICommonActionsActions m_CommonActionsActionsCallbackInterface;
    private readonly InputAction m_CommonActions_MouseClick;
    public struct CommonActionsActions
    {
        private @InputController m_Wrapper;
        public CommonActionsActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_CommonActions_MouseClick;
        public InputActionMap Get() { return m_Wrapper.m_CommonActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonActionsActions set) { return set.Get(); }
        public void SetCallbacks(ICommonActionsActions instance)
        {
            if (m_Wrapper.m_CommonActionsActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_CommonActionsActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_CommonActionsActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_CommonActionsActionsCallbackInterface.OnMouseClick;
            }
            m_Wrapper.m_CommonActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
            }
        }
    }
    public CommonActionsActions @CommonActions => new CommonActionsActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnZoomInOut(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
    }
    public interface ICommonActionsActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
    }
}
