//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Mark2Data/Code/InputActions/GameManagerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameManagerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameManagerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameManagerInput"",
    ""maps"": [
        {
            ""name"": ""ButtonInput"",
            ""id"": ""ac047fe5-8b79-486e-81da-cb07504446f2"",
            ""actions"": [
                {
                    ""name"": ""Radar"",
                    ""type"": ""Button"",
                    ""id"": ""ac512631-8aa8-4beb-a745-ed70ebadf9e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66a821f4-24e2-4e98-9134-afd37a6ce339"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Radar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ExitBtn"",
            ""id"": ""e8c12da0-9c91-4a61-9f56-349a7d22ef06"",
            ""actions"": [
                {
                    ""name"": ""ExitGame"",
                    ""type"": ""Button"",
                    ""id"": ""3283818c-ca7b-43bc-9853-0d3841638766"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a70bff9c-9bf4-4393-b063-92a4323c114b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ButtonInput
        m_ButtonInput = asset.FindActionMap("ButtonInput", throwIfNotFound: true);
        m_ButtonInput_Radar = m_ButtonInput.FindAction("Radar", throwIfNotFound: true);
        // ExitBtn
        m_ExitBtn = asset.FindActionMap("ExitBtn", throwIfNotFound: true);
        m_ExitBtn_ExitGame = m_ExitBtn.FindAction("ExitGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ButtonInput
    private readonly InputActionMap m_ButtonInput;
    private IButtonInputActions m_ButtonInputActionsCallbackInterface;
    private readonly InputAction m_ButtonInput_Radar;
    public struct ButtonInputActions
    {
        private @GameManagerInput m_Wrapper;
        public ButtonInputActions(@GameManagerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Radar => m_Wrapper.m_ButtonInput_Radar;
        public InputActionMap Get() { return m_Wrapper.m_ButtonInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonInputActions set) { return set.Get(); }
        public void SetCallbacks(IButtonInputActions instance)
        {
            if (m_Wrapper.m_ButtonInputActionsCallbackInterface != null)
            {
                @Radar.started -= m_Wrapper.m_ButtonInputActionsCallbackInterface.OnRadar;
                @Radar.performed -= m_Wrapper.m_ButtonInputActionsCallbackInterface.OnRadar;
                @Radar.canceled -= m_Wrapper.m_ButtonInputActionsCallbackInterface.OnRadar;
            }
            m_Wrapper.m_ButtonInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Radar.started += instance.OnRadar;
                @Radar.performed += instance.OnRadar;
                @Radar.canceled += instance.OnRadar;
            }
        }
    }
    public ButtonInputActions @ButtonInput => new ButtonInputActions(this);

    // ExitBtn
    private readonly InputActionMap m_ExitBtn;
    private IExitBtnActions m_ExitBtnActionsCallbackInterface;
    private readonly InputAction m_ExitBtn_ExitGame;
    public struct ExitBtnActions
    {
        private @GameManagerInput m_Wrapper;
        public ExitBtnActions(@GameManagerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitGame => m_Wrapper.m_ExitBtn_ExitGame;
        public InputActionMap Get() { return m_Wrapper.m_ExitBtn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExitBtnActions set) { return set.Get(); }
        public void SetCallbacks(IExitBtnActions instance)
        {
            if (m_Wrapper.m_ExitBtnActionsCallbackInterface != null)
            {
                @ExitGame.started -= m_Wrapper.m_ExitBtnActionsCallbackInterface.OnExitGame;
                @ExitGame.performed -= m_Wrapper.m_ExitBtnActionsCallbackInterface.OnExitGame;
                @ExitGame.canceled -= m_Wrapper.m_ExitBtnActionsCallbackInterface.OnExitGame;
            }
            m_Wrapper.m_ExitBtnActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ExitGame.started += instance.OnExitGame;
                @ExitGame.performed += instance.OnExitGame;
                @ExitGame.canceled += instance.OnExitGame;
            }
        }
    }
    public ExitBtnActions @ExitBtn => new ExitBtnActions(this);
    public interface IButtonInputActions
    {
        void OnRadar(InputAction.CallbackContext context);
    }
    public interface IExitBtnActions
    {
        void OnExitGame(InputAction.CallbackContext context);
    }
}
